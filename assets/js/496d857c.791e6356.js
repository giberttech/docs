"use strict";(self.webpackChunkgilbertsoftware=self.webpackChunkgilbertsoftware||[]).push([[887],{3257:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"resql/schema-evolution","title":"Schema Evolution","description":"Schema evolution is the process of updating your database schema when your JSON data structure changes over time. While ReSQL doesn\'t currently support automatic schema evolution, you can achieve this using Large Language Models (LLMs) to generate the necessary SQL migration statements.","source":"@site/docs/resql/schema-evolution.md","sourceDirName":"resql","slug":"/resql/schema-evolution","permalink":"/docs/resql/schema-evolution","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/resql/schema-evolution.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Examples and Use Cases","permalink":"/docs/resql/examples"},"next":{"title":"Troubleshooting","permalink":"/docs/resql/troubleshooting"}}');var a=s(4848),r=s(8453);const i={},o="Schema Evolution",l={},d=[{value:"Using LLMs for Schema Evolution",id:"using-llms-for-schema-evolution",level:2},{value:"Step 1: Generate Before and After Schemas",id:"step-1-generate-before-and-after-schemas",level:3},{value:"Step 2: Use LLM to Generate Migration",id:"step-2-use-llm-to-generate-migration",level:3},{value:"Example Workflow",id:"example-workflow",level:2},{value:"Original JSON Data",id:"original-json-data",level:3},{value:"Updated JSON Data",id:"updated-json-data",level:3},{value:"Generated Schemas",id:"generated-schemas",level:3},{value:"LLM-Generated Migration",id:"llm-generated-migration",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"schema-evolution",children:"Schema Evolution"})}),"\n",(0,a.jsx)(n.p,{children:"Schema evolution is the process of updating your database schema when your JSON data structure changes over time. While ReSQL doesn't currently support automatic schema evolution, you can achieve this using Large Language Models (LLMs) to generate the necessary SQL migration statements."}),"\n",(0,a.jsx)(n.h2,{id:"using-llms-for-schema-evolution",children:"Using LLMs for Schema Evolution"}),"\n",(0,a.jsx)(n.h3,{id:"step-1-generate-before-and-after-schemas",children:"Step 1: Generate Before and After Schemas"}),"\n",(0,a.jsx)(n.p,{children:"Use ReSQL to generate schemas for both your old and new JSON data structures:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Generate the original schema:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Load your original JSON data into ReSQL"}),"\n",(0,a.jsx)(n.li,{children:"Generate the schema and export the SQL"}),"\n",(0,a.jsx)(n.li,{children:'Save this as your "before" schema'}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Generate the new schema:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Load your updated JSON data into ReSQL"}),"\n",(0,a.jsx)(n.li,{children:"Generate the new schema and export the SQL"}),"\n",(0,a.jsx)(n.li,{children:'Save this as your "after" schema'}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"step-2-use-llm-to-generate-migration",children:"Step 2: Use LLM to Generate Migration"}),"\n",(0,a.jsx)(n.p,{children:"Create a prompt that includes both schemas and asks for migration statements:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"I have a database schema that needs to be updated. Please analyze the differences between the old and new schemas and generate the necessary SQL ALTER TABLE statements to migrate from the old schema to the new schema.\n\nOLD SCHEMA:\n[Paste your original schema SQL here]\n\nNEW SCHEMA:\n[Paste your new schema SQL here]\n\nPlease provide:\n1. ALTER TABLE statements to add new columns\n2. CREATE TABLE statements for new tables\n3. Foreign key constraint additions\n\nAssume the database is [your database type: PostgreSQL/MySQL/SQL Server/etc.]\n"})}),"\n",(0,a.jsx)(n.h2,{id:"example-workflow",children:"Example Workflow"}),"\n",(0,a.jsx)(n.h3,{id:"original-json-data",children:"Original JSON Data"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "users": [\n    {\n      "id": 1,\n      "name": "John Doe",\n      "email": "john@example.com"\n    }\n  ]\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"updated-json-data",children:"Updated JSON Data"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "users": [\n    {\n      "id": 1,\n      "name": "John Doe",\n      "email": "john@example.com",\n      "phone": "+1-555-0123",\n      "address": {\n        "street": "123 Main St",\n        "city": "Anytown",\n        "zip": "12345"\n      }\n    }\n  ]\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"generated-schemas",children:"Generated Schemas"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Original Schema (Before):"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE users (\n  id INTEGER PRIMARY KEY,\n  name VARCHAR(255),\n  email VARCHAR(255)\n);\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"New Schema (After):"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE users (\n  id INTEGER PRIMARY KEY,\n  name VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(255)\n);\n\nCREATE TABLE address (\n  id INTEGER PRIMARY KEY,\n  street VARCHAR(255),\n  city VARCHAR(255),\n  zip VARCHAR(255),\n  users_id INTEGER,\n  FOREIGN KEY (users_id) REFERENCES users(id)\n);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"llm-generated-migration",children:"LLM-Generated Migration"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- Add new phone column to users table\nALTER TABLE users ADD COLUMN phone VARCHAR(255);\n\n-- Create new address table\nCREATE TABLE address (\n  id INTEGER PRIMARY KEY,\n  street VARCHAR(255),\n  city VARCHAR(255),\n  zip VARCHAR(255),\n  users_id INTEGER,\n  FOREIGN KEY (users_id) REFERENCES users(id)\n);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Test on sample data"})," before applying to production"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Include database type"})," in your LLM prompt"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Request validation queries"})," to verify the migration"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Consider data migration"})," for existing records"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Plan for rollback"})," in case of issues"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Practice with sample data to understand the workflow"}),"\n",(0,a.jsx)(n.li,{children:"Develop templates for common schema evolution patterns"}),"\n",(0,a.jsx)(n.li,{children:"Consider automating the LLM interaction for frequent schema changes"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var t=s(6540);const a={},r=t.createContext(a);function i(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);